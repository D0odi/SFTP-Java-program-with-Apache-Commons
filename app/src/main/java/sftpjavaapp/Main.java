/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sftpjavaapp;

import org.apache.commons.vfs2.*;
import org.apache.commons.vfs2.provider.sftp.IdentityInfo;
import org.apache.commons.vfs2.provider.sftp.SftpFileSystemConfigBuilder;
import sftpjavaapp.exceptions.FileExistsException;
import sftpjavaapp.exceptions.MissingConfigParameterException;

import java.io.File;
import java.util.ArrayList;
import java.util.Properties;

public class Main {
    private static String username;
    private static String password;
    private static String hostPort;
    private static Properties properties;

    public static void main(String[] args) {
        try {
            properties = new Properties();
            properties.load(Main.class.getClassLoader().getResourceAsStream("config.properties"));

            username = properties.getProperty("username");
            password = properties.getProperty("password");
            hostPort = properties.getProperty("hostPort");

            // SFTP connection to container via SSH key pair
            String privateKeyPath = properties.getProperty("privateKeyPath");
            FileSystemOptions fsOptions = new FileSystemOptions();
            File privateKeyFile = new File(privateKeyPath);
            IdentityInfo identityInfo = new IdentityInfo(privateKeyFile);
            SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(fsOptions, "no");
            SftpFileSystemConfigBuilder.getInstance().setIdentityInfo(fsOptions, identityInfo);

            String job = properties.getProperty("job");

            // Program runs depending on the job type
            if (job.equals("upload_file")) {
                migrateFile(true);
            } else if (job.equals("download_file")) {
                migrateFile(false);
            }
            else if (job.equals("get_file_names")) {
                listFileNames();
            }
            else if (job.equals("download_dir")) {
                migrateDir(false);
            }
            else if (job.equals("upload_dir")) {
                migrateDir(true);
            }
            else if (job.equals("delete_file")) {
                // deletes file from remote dir
            }
            else if (job == null || job.isEmpty()) {
                throw new MissingConfigParameterException("job");
            }


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void migrateFile(boolean local_to_remote) throws MissingConfigParameterException, FileExistsException {
        String fileName = properties.getProperty("fileName");
        String remoteDir = properties.getProperty("remoteDir");
        String localDir = properties.getProperty("localDir");

        if(fileName == null || fileName.isEmpty()) {
            throw new MissingConfigParameterException("fileName");
        }
        if(remoteDir == null || remoteDir.isEmpty()) {
            throw new MissingConfigParameterException("remoteDir");
        }
        if(localDir == null || localDir.isEmpty()) {
            throw new MissingConfigParameterException("localDir");
        }

        try {
            FileSystemManager manager = VFS.getManager();

            FileObject local = null;
            FileObject remote = null;

            if (local_to_remote) {
                local = manager.resolveFile(localDir + fileName);
                String remote_file_name = local.getName().getBaseName();
                remote = manager.resolveFile("sftp://" + username + ":" + password + "@localhost:" + hostPort + "/" + remoteDir + "/" + remote_file_name);
                if (remote.exists()) { throw new FileExistsException(remote_file_name); }
                remote.copyFrom(local, Selectors.SELECT_SELF);
            } else {
                remote = manager.resolveFile("sftp://" + username + ":" + password + "@localhost:" + hostPort + "/" + remoteDir + "/" + fileName);
                String local_file_name = remote.getName().getBaseName();
                local = manager.resolveFile(localDir + local_file_name);
                if (local.exists()) { throw new FileExistsException(local_file_name); }
                local.copyFrom(remote, Selectors.SELECT_SELF);
            }

            local.close();
            remote.close();
            manager.close();
        } catch (FileSystemException e) {
            e.printStackTrace();
        }
    }

    public static void listFileNames() throws MissingConfigParameterException {
        String remoteDir = properties.getProperty("remoteDir");

        if(remoteDir == null || remoteDir.isEmpty()) {
            throw new MissingConfigParameterException("remoteDir");
        }

        ArrayList<String> fileNames = new ArrayList<>();

        try {
            FileSystemManager manager = VFS.getManager();
            FileObject remote = manager.resolveFile("sftp://" + username + ":" + password + "@localhost:" + hostPort + "/" + remoteDir);

            if (remote.exists() && remote.isFolder()) {
                FileObject[] children = remote.getChildren();
                for (FileObject child : children) {
                    if (!child.isFolder()) {
                        fileNames.add(child.getName().getBaseName() + child.getType());
                    }
                    else {
                        fileNames.add(child.getName().getBaseName() + " (dir)");
                    }
                }
            }
            manager.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        for (String name : fileNames) {
            System.out.println(name);
        }
    }

    public static void migrateDir(boolean local_to_remote) throws MissingConfigParameterException {
        String remoteDir = properties.getProperty("remoteDir");
        String localDir = properties.getProperty("localDir");
        String filesOnly = properties.getProperty("filesOnly");

        if(remoteDir == null || remoteDir.isEmpty()) {
            throw new MissingConfigParameterException("remoteDir");
        }
        if(localDir == null || localDir.isEmpty()) {
            throw new MissingConfigParameterException("localDir");
        }
        if(filesOnly == null || filesOnly.isEmpty()) {
            throw new MissingConfigParameterException("filesOnly");
        }


        try {
            FileSystemManager manager = VFS.getManager();

            String sftp = "sftp://" + username + ":" + password + "@localhost:" + hostPort + "/" + remoteDir;

            FileObject source = local_to_remote ? manager.resolveFile(localDir) : manager.resolveFile(sftp);
            FileObject dest = local_to_remote ? manager.resolveFile(sftp + "/" + source.getName().getBaseName())
                                                : manager.resolveFile(localDir + "/" + source.getName().getBaseName());

            if (dest.exists()) {throw new FileExistsException(dest.getName().getBaseName());}


            if (filesOnly.equals("no")) {
                recursiveMigrationHelper(source, dest, manager);
            } else if (filesOnly.equals("yes")) {
                FileObject[] sourceChildren = source.getChildren();
                for (FileObject sourceChild : sourceChildren) {
                    String baseName = sourceChild.getName().getBaseName();
                    // migrate file
                    if (sourceChild.isFile()) {
                        FileObject destChild = manager.resolveFile(dest + "/" + baseName);
                        if (destChild.exists()) {throw new FileExistsException(destChild.getName().getBaseName());}
                        destChild.copyFrom(sourceChild, Selectors.SELECT_SELF);
                    }
                }
            } else {
                throw new MissingConfigParameterException("filesOnly");
            }

            manager.close();
            source.close();
            dest.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void recursiveMigrationHelper(FileObject source, FileObject dest, FileSystemManager manager) throws FileSystemException, FileExistsException {
        FileObject[] sourceChildren = source.getChildren();
        for (FileObject sourceChild : sourceChildren) {
            String baseName = sourceChild.getName().getBaseName();
            // migrate file
            if (sourceChild.isFile()) {
                FileObject destChild = manager.resolveFile(dest + "/" + baseName);
                destChild.copyFrom(sourceChild, Selectors.SELECT_SELF);
            }
            else {
                FileObject innerDest = manager.resolveFile(dest + "/" + baseName);
                recursiveMigrationHelper(sourceChild, innerDest, manager);
            }
        }
    }
}

